// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::controlSSleftFrontM;
std::shared_ptr<SpeedController> RobotMap::controlSSleftRearM;
std::shared_ptr<SpeedController> RobotMap::controlSSrightFrontM;
std::shared_ptr<SpeedController> RobotMap::controlSSrightRearM;
std::shared_ptr<RobotDrive> RobotMap::controlSSRobotDrive;
std::shared_ptr<AnalogInput> RobotMap::controlSSshooterGauge;
std::shared_ptr<AnalogInput> RobotMap::controlSSarmGauge;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    controlSSleftFrontM.reset(new Talon(0));
    lw->AddActuator("ControlSS", "leftFrontM", (Talon&) controlSSleftFrontM);
    
    controlSSleftRearM.reset(new Talon(1));
    lw->AddActuator("ControlSS", "leftRearM", (Talon&) controlSSleftRearM);
    
    controlSSrightFrontM.reset(new Talon(2));
    lw->AddActuator("ControlSS", "rightFrontM", (Talon&) controlSSrightFrontM);
    
    controlSSrightRearM.reset(new Talon(3));
    lw->AddActuator("ControlSS", "rightRearM", (Talon&) controlSSrightRearM);
    
    controlSSRobotDrive.reset(new RobotDrive(controlSSleftFrontM, controlSSleftRearM,
              controlSSrightFrontM, controlSSrightRearM));
    
    controlSSRobotDrive->SetSafetyEnabled(true);
        controlSSRobotDrive->SetExpiration(0.1);
        controlSSRobotDrive->SetSensitivity(0.5);
        controlSSRobotDrive->SetMaxOutput(1.0);

    controlSSshooterGauge.reset(new AnalogInput(0));
    lw->AddSensor("ControlSS", "shooterGauge", controlSSshooterGauge);
    
    controlSSarmGauge.reset(new AnalogInput(1));
    lw->AddSensor("ControlSS", "armGauge", controlSSarmGauge);
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
