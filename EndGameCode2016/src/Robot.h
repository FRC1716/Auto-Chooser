// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef _ROBOT_H
#define _ROBOT_H

#include "WPILib.h"
#include "Commands/Command.h"
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/AutonomousCommand.h"
#include "Subsystems/ControlSS.h"
#include "SmartDashboard/SmartDashboard.h"

#include "Subsystems/ControlSS.h"
#include "Commands/Pos1.h"
#include "Commands/Pos2.h"
#include "Commands/Pos3.h"
#include "Commands/Pos4.h"
#include "Commands/Pos5.h"
#include "Commands/Def1.h"
#include "Commands/Def2.h"
#include "Commands/Def3.h"
#include "Commands/Def4.h"
#include "Commands/Def5.h"
#include "Commands/Def6.h"
#include "Commands/Def7.h"
#include "Commands/Def8.h"
#include "Commands/Def9.h"
#include "Commands/windowForward.h"
#include "Commands/windowReverse.h"

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "OI.h"

class Robot : public IterativeRobot {
public:
	std::unique_ptr<Command> autonomousCommand;
	static std::unique_ptr<OI> oi;
	LiveWindow *lw = LiveWindow::GetInstance();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    static std::shared_ptr<ControlSS> controlSS;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    Command* temp;
    Command* temp2;

    //create SC objects for position and defense

    //static std::shared_ptr<SendableChooser> posSC;
    SendableChooser* posSC;
    //static std::shared_ptr<SendableChooser> defSC;
    SendableChooser* defSC;

    virtual void RobotInit();
	virtual void DisabledInit();
	virtual void DisabledPeriodic();
	virtual void AutonomousInit();
	virtual void AutonomousPeriodic();
	virtual void TeleopInit();
	virtual void TeleopPeriodic();
	virtual void TestPeriodic();
};
#endif
